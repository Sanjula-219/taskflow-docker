REST API ARCHITECTURE
                    ====================

┌─────────────┐
│   CLIENT    │  (Postman, Browser, Mobile App)
│  (Frontend) │
└──────┬──────┘
       │
       │ HTTP Request (GET, POST, PUT, DELETE)
       │ Example: POST /api/projects
       │ Body: { "name": "DevOps" }
       │
       ▼
┌─────────────────────────────────────────────────────┐
│                    SERVER.JS                         │
│              (Main Entry Point)                      │
│                                                      │
│  1. Receive HTTP Request                            │
│  2. Parse Request Body (Middleware)                 │
│  3. Route to appropriate endpoint                   │
└──────────────────┬──────────────────────────────────┘
                   │
                   │ Routes traffic to correct route
                   │
                   ▼
         ┌─────────────────┐
         │     ROUTES      │  (URL Mapping)
         │  (Traffic Cop)  │
         │                 │
         │  Checks URL:    │
         │  /api/projects  │
         │  /api/tasks     │
         └────────┬────────┘
                  │
                  │ Calls appropriate controller
                  │
                  ▼
         ┌─────────────────┐
         │   CONTROLLER    │  (Business Logic)
         │  (Brain/Logic)  │
         │                 │
         │  - Validate data│
         │  - Process logic│
         │  - Call Model   │
         └────────┬────────┘
                  │
                  │ Database operations
                  │
                  ▼
         ┌─────────────────┐
         │     MODEL       │  (Data Structure)
         │  (Blueprint)    │
         │                 │
         │  - Schema       │
         │  - Validation   │
         │  - DB Queries   │
         └────────┬────────┘
                  │
                  │ MongoDB queries
                  │
                  ▼
         ┌─────────────────┐
         │    DATABASE     │  (MongoDB)
         │   (Storage)     │
         │                 │
         │  Collections:   │
         │  - projects     │
         │  - tasks        │
         └─────────────────┘


Restaurant Analogy:

REST API = Restaurant (කෑම කඩයක්)

┌────────────────────────────────────────────────────┐
│                                                    │
│  Customer (Client/Postman)                        │
│  "මට chicken rice එකක් ඕනේ"                       │
│                                                    │
└──────────────┬─────────────────────────────────────┘
               │
               │ Order (HTTP Request)
               │
               ▼
┌─────────────────────────────────────────────────────┐
│  Waiter (server.js)                                 │
│  "හරි, මම order එක kitchen එකට දෙන්නම්"          │
│                                                     │
│  - Order එක receive කරනවා                         │
│  - Check කරනවා valid order එකක්ද කියලා            │
│  - Correct department එකට යවනවා                   │
└──────────────┬──────────────────────────────────────┘
               │
               │ Order routing
               │
               ▼
┌─────────────────────────────────────────────────────┐
│  Receptionist (Routes)                              │
│  "Chicken rice? අපේ chef ට යවන්නම්"               │
│                                                     │
│  - URL එක check කරනවා                             │
│  - Correct handler එකට direct කරනවා               │
└──────────────┬──────────────────────────────────────┘
               │
               │ Assigns to correct chef
               │
               ▼
┌─────────────────────────────────────────────────────┐
│  Chef (Controller)                                  │
│  "හරි, මම හදන්නම්"                                │
│                                                     │
│  - Recipe check කරනවා (validation)                 │
│  - Ingredients ඕනේද check කරනවා (business logic)  │
│  - Store room එකට යනවා (call Model)               │
└──────────────┬──────────────────────────────────────┘
               │
               │ Gets ingredients
               │
               ▼
┌─────────────────────────────────────────────────────┐
│  Store Manager (Model)                              │
│  "Chicken rice හදන්න මේවා ඕනේ"                    │
│                                                     │
│  - Recipe blueprint තියෙනවා (Schema)               │
│  - Rules තියෙනවා කොහොමද හදන්නේ කියලා (Validation) │
│  - Store room එකට access කරනවා (DB queries)       │
└──────────────┬──────────────────────────────────────┘
               │
               │ Gets from storage
               │
               ▼
┌─────────────────────────────────────────────────────┐
│  Store Room (Database - MongoDB)                    │
│  "මේන්න ingredients"                               │
│                                                     │
│  - Rice තියෙනවා (data stored)                     │
│  - Chicken තියෙනවා (data stored)                  │
│  - Organized shelves (Collections: projects, tasks)│
└─────────────────────────────────────────────────────┘

               │
               │ Data flows back up
               │
               ▼

         Customer gets food! 🍗🍚


Part 3: Request-Response Flow

Example: Create a Project


USER ACTION: POST /api/projects
Body: { "name": "DevOps", "description": "Learning" }

═══════════════════════════════════════════════════════

STEP 1: Request Enters server.js
────────────────────────────────
┌──────────────────────────────────────┐
│  server.js (Main Entry)              │
│                                      │
│  const app = express();              │
│                                      │
│  ┌────────────────────────────────┐ │
│  │  Middleware Chain              │ │
│  │  ┌──────────────────────────┐ │ │
│  │  │ express.json()           │ │ │
│  │  │ Parses JSON body         │ │ │
│  │  │ req.body = { "name":...} │ │ │
│  │  └──────────────────────────┘ │ │
│  │                                │ │
│  │  ┌──────────────────────────┐ │ │
│  │  │ CORS middleware          │ │ │
│  │  │ Allows cross-origin      │ │ │
│  │  └──────────────────────────┘ │ │
│  └────────────────────────────────┘ │
│                                      │
│  app.use("/api/projects", projectRoutes);
│         └─────┬────────┘              │
└───────────────┼───────────────────────┘
                │
                │ URL matches!
                │
                ▼

═══════════════════════════════════════════════════════

STEP 2: Route Matching
───────────────────────
┌──────────────────────────────────────┐
│  projectRoutes.js                    │
│                                      │
│  router.route("/")                   │
│    .post(createProject)              │
│           └──────┬─────┘             │
│                  │                   │
│  HTTP Method = POST? ✅ Yes!         │
│  Path = "/"? ✅ Yes!                 │
│  (because /api/projects already     │
│   matched in server.js)             │
│                                      │
│  Calls: createProject function       │
└──────────────────┼───────────────────┘
                   │
                   │ Function call
                   │
                   ▼

═══════════════════════════════════════════════════════

STEP 3: Controller Processing
──────────────────────────────
┌──────────────────────────────────────────────┐
│  projectController.js                        │
│                                              │
│  const createProject = async (req, res) => {│
│                                              │
│    ┌─────────────────────────────────────┐ │
│    │ STEP 3A: Extract Data               │ │
│    │ ────────────────────                │ │
│    │ const { name, description } =       │ │
│    │       req.body;                     │ │
│    │                                     │ │
│    │ name = "DevOps"                     │ │
│    │ description = "Learning"            │ │
│    └─────────────────────────────────────┘ │
│                                              │
│    ┌─────────────────────────────────────┐ │
│    │ STEP 3B: Validation                 │ │
│    │ ───────────────                     │ │
│    │ if (!name) {                        │ │
│    │   return error                      │ │
│    │ }                                   │ │
│    │                                     │ │
│    │ ✅ name තියෙනවා, continue!         │ │
│    └─────────────────────────────────────┘ │
│                                              │
│    ┌─────────────────────────────────────┐ │
│    │ STEP 3C: Call Model                 │ │
│    │ ───────────────                     │ │
│    │ const project =                     │ │
│    │   await Project.create({            │ │
│    │     name,                           │ │
│    │     description                     │ │
│    │   });                               │ │
│    │        └───────┬─────────┘          │ │
│    └────────────────┼───────────────────┘ │
└─────────────────────┼─────────────────────┘
                      │
                      │ Model call
                      │
                      ▼

═══════════════════════════════════════════════════════

STEP 4: Model Processing
─────────────────────────
┌──────────────────────────────────────────────┐
│  Project.js (Model)                          │
│                                              │
│  const projectSchema = new Schema({         │
│    name: {                                   │
│      type: String,                           │
│      required: true,    ← Validation!        │
│      minlength: 3       ← Validation!        │
│    },                                        │
│    description: String,                      │
│    status: {                                 │
│      default: "active"  ← Auto-fills!        │
│    }                                         │
│  }, { timestamps: true }); ← Auto createdAt! │
│                                              │
│  ┌─────────────────────────────────────┐    │
│  │ STEP 4A: Schema Validation          │    │
│  │ ──────────────────────              │    │
│  │ ✅ name length = 6 (>= 3) OK!       │    │
│  │ ✅ name type = String OK!           │    │
│  │ ✅ All validations pass!            │    │
│  └─────────────────────────────────────┘    │
│                                              │
│  ┌─────────────────────────────────────┐    │
│  │ STEP 4B: Prepare Document           │    │
│  │ ─────────────────────               │    │
│  │ Document to save:                   │    │
│  │ {                                   │    │
│  │   name: "DevOps",                   │    │
│  │   description: "Learning",          │    │
│  │   status: "active", ← Auto!         │    │
│  │   createdAt: Date,  ← Auto!         │    │
│  │   updatedAt: Date   ← Auto!         │    │
│  │ }                                   │    │
│  └─────────────────────────────────────┘    │
│                                              │
│  ┌─────────────────────────────────────┐    │
│  │ STEP 4C: Database Query             │    │
│  │ ───────────────────                 │    │
│  │ Mongoose translates to:             │    │
│  │                                     │    │
│  │ db.projects.insertOne({...})        │    │
│  │            └────┬────┘              │    │
│  └─────────────────┼───────────────────┘    │
└────────────────────┼──────────────────────┘
                     │
                     │ MongoDB query
                     │
                     ▼

═══════════════════════════════════════════════════════

STEP 5: Database Operation
───────────────────────────
┌──────────────────────────────────────────────┐
│  MongoDB (Database)                          │
│                                              │
│  Database: taskflow-db                       │
│  Collection: projects                        │
│                                              │
│  ┌─────────────────────────────────────┐    │
│  │ Current Data:                       │    │
│  │ [                                   │    │
│  │   {                                 │    │
│  │     _id: ObjectId("abc123"),        │    │
│  │     name: "Old Project",            │    │
│  │     ...                             │    │
│  │   }                                 │    │
│  │ ]                                   │    │
│  └─────────────────────────────────────┘    │
│                                              │
│  ┌─────────────────────────────────────┐    │
│  │ INSERT New Document                 │    │
│  │ ───────────────────                 │    │
│  │ MongoDB creates:                    │    │
│  │ - Unique _id (ObjectId)             │    │
│  │ - Stores document                   │    │
│  └─────────────────────────────────────┘    │
│                                              │
│  ┌─────────────────────────────────────┐    │
│  │ New Data:                           │    │
│  │ [                                   │    │
│  │   { _id: ObjectId("abc123"), ... }, │    │
│  │   {                                 │    │
│  │     _id: ObjectId("xyz789"), ← NEW! │    │
│  │     name: "DevOps",                 │    │
│  │     description: "Learning",        │    │
│  │     status: "active",               │    │
│  │     createdAt: "2025-10-02...",     │    │
│  │     updatedAt: "2025-10-02..."      │    │
│  │   }                                 │    │
│  │ ]                                   │    │
│  └─────────────────────────────────────┘    │
│                                              │
│  Returns: Saved document with _id           │
└──────────────────┬───────────────────────────┘
                   │
                   │ Document returned
                   │
                   ▼

═══════════════════════════════════════════════════════

STEP 6: Response Journey Back
──────────────────────────────

Database → Model → Controller → Response

┌──────────────────────────────────────────────┐
│  Controller receives saved document:         │
│                                              │
│  const project = {                           │
│    _id: "xyz789",                            │
│    name: "DevOps",                           │
│    description: "Learning",                  │
│    status: "active",                         │
│    createdAt: "2025-10-02T10:30:00.000Z",   │
│    updatedAt: "2025-10-02T10:30:00.000Z"    │
│  }                                           │
│                                              │
│  res.status(201).json({                      │
│    success: true,                            │
│    data: project                             │
│  });                                         │
└──────────────────┬───────────────────────────┘
                   │
                   │ HTTP Response
                   │
                   ▼
┌──────────────────────────────────────────────┐
│  CLIENT receives:                            │
│                                              │
│  Status: 201 Created                         │
│  Body: {                                     │
│    "success": true,                          │
│    "data": {                                 │
│      "_id": "xyz789",                        │
│      "name": "DevOps",                       │
│      "description": "Learning",              │
│      "status": "active",                     │
│      "createdAt": "2025-10-02T10:30:00Z",   │
│      "updatedAt": "2025-10-02T10:30:00Z"    │
│    }                                         │
│  }                                           │
└──────────────────────────────────────────────┘

SUCCESS! ✅

                                                          🧩 Part 4: Component Breakdown




1. server.js - Main Entry Point


server.js කරන වැඩේ:
═══════════════════

┌────────────────────────────────────┐
│  1. Initialize Express App         │
│     const app = express();         │
│     "Restaurant එක open කරනවා"    │
└────────────────────────────────────┘
         │
         ▼
┌────────────────────────────────────┐
│  2. Setup Middleware               │
│     app.use(express.json());       │
│     "Orders understand කරන system" │
└────────────────────────────────────┘
         │
         ▼
┌────────────────────────────────────┐
│  3. Connect Routes                 │
│     app.use("/api/projects", ...)  │
│     "Departments assign කරනවා"    │
└────────────────────────────────────┘
         │
         ▼
┌────────────────────────────────────┐
│  4. Connect Database               │
│     connectDB()                    │
│     "Store room connect කරනවා"    │
└────────────────────────────────────┘
         │
         ▼
┌────────────────────────────────────┐
│  5. Start Server                   │
│     app.listen(3000)               │
│     "Restaurant open for business" │
└────────────────────────────────────┘


2. Routes - Traffic Controller


Routes කරන වැඩේ:
════════════════

Request එක එනවා: POST /api/projects

┌──────────────────────────────────────┐
│  Routes.js (Traffic Police)          │
│                                      │
│  ┌────────────────────────────────┐ │
│  │ URL එක check කරනවා            │ │
│  │ "/api/projects" + "/" = match!  │ │
│  └────────────────────────────────┘ │
│           │                          │
│           ▼                          │
│  ┌────────────────────────────────┐ │
│  │ HTTP Method check කරනවා        │ │
│  │ POST method? ✅ Match!          │ │
│  └────────────────────────────────┘ │
│           │                          │
│           ▼                          │
│  ┌────────────────────────────────┐ │
│  │ Controller function call කරනවා │ │
│  │ createProject(req, res)         │ │
│  └────────────────────────────────┘ │
└──────────────────────────────────────┘

සරලව කියනවනම්:
"මේ URL එකට මේ HTTP method එකෙන් request එකක් 
 අවොත්, මේ function එක run කරන්න"



.route("/") = මේ path එකට
.get() = GET requests යවන්න මේ function එකට
.post() = POST requests යවන්න මේ function එකට
/:id = Dynamic parameter (කොයි ID එකක්ද කියලා)




3. Controller - Business Logic



Controller කරන වැඩේ:
══════════════════

Controller = Restaurant Chef
            (Cooking + Rules)

┌────────────────────────────────────────┐
│  createProject Function                │
│                                        │
│  Step 1: Data Extract කරනවා           │
│  ┌──────────────────────────────────┐ │
│  │ const { name, description } =    │ │
│  │       req.body;                  │ │
│  │                                  │ │
│  │ "Order එකේ මොනවද තියෙන්නේ      │ │
│  │  බලමු"                           │ │
│  └──────────────────────────────────┘ │
│                                        │
│  Step 2: Validation                    │
│  ┌──────────────────────────────────┐ │
│  │ if (!name) {                     │ │
│  │   return error                   │ │
│  │ }                                │ │
│  │                                  │ │
│  │ "නම නැත්නම් හදන්න බැහැ"         │ │
│  └──────────────────────────────────┘ │
│                                        │
│  Step 3: Business Logic                │
│  ┌──────────────────────────────────┐ │
│  │ // Extra checks                  │ │
│  │ // Calculations                  │ │
│  │ // Transformations               │ │
│  │                                  │ │
│  │ "Special rules apply කරනවා"     │ │
│  └──────────────────────────────────┘ │
│                                        │
│  Step 4: Database Call                 │
│  ┌──────────────────────────────────┐ │
│  │ const project =                  │ │
│  │   await Project.create({...});   │ │
│  │                                  │ │
│  │ "Store room එකට යවනවා save      │ │
│  │  කරන්න"                          │ │
│  └──────────────────────────────────┘ │
│                                        │
│  Step 5: Response                      │
│  ┌──────────────────────────────────┐ │
│  │ res.status(201).json({           │ │
│  │   success: true,                 │ │
│  │   data: project                  │ │
│  │ });                              │ │
│  │                                  │ │
│  │ "Customer ට result එක return    │ │
│  │  කරනවා"                          │ │
│  └──────────────────────────────────┘ │
└────────────────────────────────────────┘



Try-Catch Block:
javascripttry {
  // Happy path - වැඩේ හරියට වුනොත්
  const project = await Project.create({...});
  res.json({ success: true, data: project });
  
} catch (error) {
  // Error path - වැඩේ වැරදුනොත්
  res.status(500).json({ 
    success: false, 
    error: error.message 
  });
}


try {} = මේ code එක run කරලා බලන්න
catch {} = error එකක් අවොත් මෙතන handle කරන්න


4. Model - Data Blueprint

Model කරන වැඩේ:
═══════════════

Model = Recipe Book + Quality Control
        (කොහොමද හදන්නේ + Rules)

┌────────────────────────────────────────────┐
│  Project Model (Schema)                    │
│                                            │
│  ┌──────────────────────────────────────┐ │
│  │ STRUCTURE (කොහොමද තියෙන්න ඕනේ)     │ │
│  │ ──────────────────────────────       │ │
│  │ const projectSchema = {              │ │
│  │   name: String,        ← Field type  │ │
│  │   description: String, ← Field type  │ │
│  │   status: String       ← Field type  │ │
│  │ }                                    │ │
│  │                                      │ │
│  │ "Project එකක මේ fields තියෙන්න ඕනේ" │ │
│  └──────────────────────────────────────┘ │
│                                            │
│  ┌──────────────────────────────────────┐ │
│  │ RULES (Rules & Validation)           │ │
│  │ ────────────────────────             │ │
│  │ name: {                              │ │
│  │   type: String,                      │ │
│  │   required: true,     ← අනිවාර්යයි!  │ │
│  │   minlength: 3,       ← අවම 3 ක්!    │ │
│  │   maxlength: 100      ← උපරිම 100!   │ │
│  │ }                                    │ │
│  │                                      │ │
│  │ "Name එක required, 3-100 characters" │ │
│  └──────────────────────────────────────┘ │
│                                            │
│  ┌──────────────────────────────────────┐ │
│  │ DEFAULTS (Default values)            │ │
│  │ ───────────────────────              │ │
│  │ status: {                            │ │
│  │   type: String,                      │ │
│  │   default: "active"   ← Auto value!  │ │
│  │ }                                    │ │
│  │                                      │ │
│  │ "Value නැත්නම් 'active' දාන්න"      │ │
│  └──────────────────────────────────────┘ │
│                                            │
│  ┌──────────────────────────────────────┐ │
│  │ TIMESTAMPS (Auto dates)              │ │
│  │ ─────────────────────                │ │
│  │ { timestamps: true }                 │ │
│  │                                      │ │
│  │ Automatic add:                       │ │
│  │ - createdAt  ← හැදුවේ කවදාද          │ │
│  │ - updatedAt  ← Update කළේ කවදාද       │ │
│  └──────────────────────────────────────┘ │
│                                            │
│  ┌──────────────────────────────────────┐ │
│  │ METHODS (Database operations)        │ │
│  │ ───────────────────────              │ │
│  │ Project.create()    ← Create new     │ │
│  │ Project.find()      ← Find all       │ │
│  │ Project.findById()  ← Find one       │ │
│  │ Project.updateOne() ← Update         │ │
│  │ Project.deleteOne() ← Delete         │ │
│  │                                      │ │
│  │ "Database operations හදන්න පුළුවන්"  │ │
│  └──────────────────────────────────────┘ │
└────────────────────────────────────────────┘




Testing Levels:


┌──────────────────────────────────────────┐
│  1. Manual Testing (Your responsibility) │
│     - Postman use කරලා                   │
│     - cURL commands                      │
│     - Browser (GET requests only)        │
└──────────────────────────────────────────┘
         │
         ▼
┌──────────────────────────────────────────┐
│  2. Automated Testing (Later)            │
│     - Unit tests                         │
│     - Integration tests                  │
│     - End-to-end tests                   │
└──────────────────────────────────────────┘


Your API Endpoints:


✅ Health & Info:
   - GET /health
   - GET /

✅ Projects (6 endpoints):
   - GET    /api/projects          (Get all)
   - GET    /api/projects/stats    (Statistics)
   - POST   /api/projects          (Create)
   - GET    /api/projects/:id      (Get one)
   - PUT    /api/projects/:id      (Update)
   - DELETE /api/projects/:id      (Delete)

✅ Tasks (10 endpoints):
   - GET    /api/tasks                    (Get all)
   - GET    /api/tasks/stats              (Statistics)
   - GET    /api/tasks/project/:projectId (By project)
   - GET    /api/tasks/status/:status     (By status)
   - GET    /api/tasks/priority/:priority (By priority)
   - POST   /api/tasks                    (Create)
   - GET    /api/tasks/:id                (Get one)
   - PUT    /api/tasks/:id                (Update)
   - PATCH  /api/tasks/:id/status         (Update status)
   - DELETE /api/tasks/:id                (Delete)


   Test Flow Chart:

   START Testing
    │
    ▼
┌─────────────────────────┐
│ 1. Test Health Endpoint │  ← Server running ද?
└───────────┬─────────────┘
            │
            ▼
┌─────────────────────────┐
│ 2. Create Project       │  ← New project එකක්
└───────────┬─────────────┘
            │
            │ [Save Project ID!]
            │
            ▼
┌─────────────────────────┐
│ 3. Get All Projects     │  ← List එකේ පෙන්නවද?
└───────────┬─────────────┘
            │
            ▼
┌─────────────────────────┐
│ 4. Get Single Project   │  ← ID එකෙන් ගන්න පුළුවන්ද?
└───────────┬─────────────┘
            │
            ▼
┌─────────────────────────┐
│ 5. Create Task          │  ← Project එකට task එකක්
└───────────┬─────────────┘
            │
            │ [Save Task ID!]
            │
            ▼
┌─────────────────────────┐
│ 6. Get All Tasks        │  ← List එකේ පෙන්නවද?
└───────────┬─────────────┘
            │
            ▼
┌─────────────────────────┐
│ 7. Get Tasks by Project │  ← Filtering වැඩ කරනවද?
└───────────┬─────────────┘
            │
            ▼
┌─────────────────────────┐
│ 8. Update Task Status   │  ← Status change වෙනවද?
└───────────┬─────────────┘
            │
            ▼
┌─────────────────────────┐
│ 9. Update Project       │  ← Update වැඩ කරනවද?
└───────────┬─────────────┘
            │
            ▼
┌─────────────────────────┐
│ 10. Test Error Cases    │  ← Errors handle වෙනවද?
└───────────┬─────────────┘
            │
            ▼
┌─────────────────────────┐
│ 11. Delete Task         │  ← Delete වැඩ කරනවද?
└───────────┬─────────────┘
            │
            ▼
┌─────────────────────────┐
│ 12. Delete Project      │  ← Delete වැඩ කරනවද?
└───────────┬─────────────┘
            │
            ▼
       ✅ ALL TESTS PASS!



       